import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import { ZApiClient } from '@/lib/z-api/client'
import { z } from 'zod'

// Schema para valida√ß√£o da descri√ß√£o do grupo
const UpdateGroupDescriptionSchema = z.object({
  description: z.string().max(1024, 'Descri√ß√£o muito longa').optional(),
})

// PATCH /api/groups/[id]/description - Atualizar descri√ß√£o do grupo
export async function PATCH(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const supabase = await createClient()

    // Verificar autentica√ß√£o
    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser()
    if (authError || !user) {
      return NextResponse.json({ error: 'N√£o autorizado' }, { status: 401 })
    }

    const { id: groupId } = await params
    if (!groupId) {
      return NextResponse.json({ error: 'ID do grupo √© obrigat√≥rio' }, { status: 400 })
    }

    // Validar dados do corpo da requisi√ß√£o
    const body = await request.json()
    const { description } = UpdateGroupDescriptionSchema.parse(body)

    // Verificar se o grupo existe e pertence ao usu√°rio
    const { data: existingGroup, error: fetchError } = await supabase
      .from('whatsapp_groups')
      .select('id, name, description, whatsapp_id')
      .eq('id', groupId)
      .eq('user_id', user.id)
      .single()

    if (fetchError || !existingGroup) {
      return NextResponse.json(
        { error: 'Grupo n√£o encontrado' },
        { status: 404 }
      )
    }

    // Atualizar descri√ß√£o do grupo
    const { data: updatedGroup, error: updateError } = await supabase
      .from('whatsapp_groups')
      .update({
        description: description || null,
        updated_at: new Date().toISOString(),
      })
      .eq('id', groupId)
      .eq('user_id', user.id)
      .select()
      .single()

    if (updateError) {
      console.error('Erro ao atualizar descri√ß√£o do grupo:', updateError)
      return NextResponse.json(
        { error: 'Erro ao atualizar descri√ß√£o do grupo' },
        { status: 500 }
      )
    }

    // Sincronizar com Z-API se whatsapp_id estiver presente
    console.log('üîç DEBUG: Grupo encontrado:', { 
      id: existingGroup.id, 
      name: existingGroup.name, 
      description: existingGroup.description,
      whatsapp_id: existingGroup.whatsapp_id 
    })
    
    if (existingGroup.whatsapp_id) {
      try {
        console.log(`üîÑ Sincronizando descri√ß√£o do grupo ${existingGroup.whatsapp_id} no WhatsApp para: ${description || ''}`)
        
        // Buscar inst√¢ncia Z-API ativa
        const { data: userInstance, error: instanceError } = await supabase
          .from('z_api_instances')
          .select('*')
          .eq('user_id', user.id)
          .eq('is_active', true)
          .single()

        if (instanceError || !userInstance) {
          console.error('‚ùå Erro ao buscar inst√¢ncia Z-API:', instanceError)
          // Continuar sem falhar - a descri√ß√£o foi atualizada no banco local
        } else {
          // Criar cliente Z-API
          const zApiClient = new ZApiClient(
            userInstance.instance_id,
            userInstance.instance_token,
            userInstance.client_token
          )

          // Primeiro, verificar se o usu√°rio √© administrador do grupo
          const metadataResult = await zApiClient.getGroupMetadata(existingGroup.whatsapp_id)
          
          if (metadataResult.success && metadataResult.data) {
            const groupData = metadataResult.data
            console.log('üìã Metadados do grupo:', groupData)
            
            // Obter o n√∫mero de telefone real do usu√°rio
            let userPhoneNumber = userInstance.instance_id // fallback
            
            try {
              const instanceInfo = await zApiClient.getInstanceInfo()
              if (instanceInfo.success && instanceInfo.data) {
                userPhoneNumber = instanceInfo.data.phone || instanceInfo.data.phoneNumber || instanceInfo.data.number || userInstance.instance_id
                console.log('üì± N√∫mero de telefone real obtido:', userPhoneNumber)
              }
            } catch (error) {
              console.log('‚ö†Ô∏è N√£o foi poss√≠vel obter n√∫mero real, usando instance_id')
            }
            
            // Se ainda n√£o temos o n√∫mero real, usar o owner do grupo como refer√™ncia
            if (!userPhoneNumber || userPhoneNumber === userInstance.instance_id) {
              userPhoneNumber = groupData.owner
              console.log('üì± Usando owner do grupo como n√∫mero do usu√°rio:', userPhoneNumber)
            }
            
            // Verificar se o usu√°rio √© administrador
            // O owner do grupo √© sempre administrador, e tamb√©m verificar se est√° na lista de participantes como admin
            const groupOwner = groupData.owner
            const isOwner = groupOwner === userPhoneNumber
            
            // Verificar se o usu√°rio est√° na lista de participantes como administrador
            const isParticipantAdmin = groupData.participants?.some((participant: any) => 
              participant.phone === userPhoneNumber && (participant.isAdmin || participant.isSuperAdmin)
            )
            
            const isAdmin = isOwner || isParticipantAdmin
            
            console.log('üîç DEBUG: Verifica√ß√£o de permiss√µes:', {
              groupOwner,
              userInstanceId: userInstance.instance_id,
              userPhoneNumber,
              isOwner,
              isParticipantAdmin,
              isAdmin,
              participants: groupData.participants
            })
            
            if (isAdmin) {
              console.log('‚úÖ Usu√°rio √© administrador do grupo, prosseguindo com atualiza√ß√£o')
              
              // Atualizar descri√ß√£o do grupo no WhatsApp
              const zApiResult = await zApiClient.updateGroupDescription(existingGroup.whatsapp_id, description || '')
              
              if (zApiResult.success) {
                console.log('‚úÖ Descri√ß√£o do grupo atualizada no WhatsApp com sucesso')
              } else {
                console.error('‚ùå Erro ao atualizar descri√ß√£o do grupo no WhatsApp:', zApiResult.error)
                // N√£o falhar a opera√ß√£o se a sincroniza√ß√£o falhar
              }
            } else {
              console.log('‚ö†Ô∏è AVISO: Usu√°rio n√£o √© administrador do grupo, n√£o √© poss√≠vel atualizar a descri√ß√£o no WhatsApp')
            }
          } else {
            console.error('‚ùå Erro ao obter metadados do grupo:', metadataResult.error)
            // Tentar atualizar mesmo assim
            const zApiResult = await zApiClient.updateGroupDescription(existingGroup.whatsapp_id, description || '')
            
            if (zApiResult.success) {
              console.log('‚úÖ Descri√ß√£o do grupo atualizada no WhatsApp com sucesso')
            } else {
              console.error('‚ùå Erro ao atualizar descri√ß√£o do grupo no WhatsApp:', zApiResult.error)
            }
          }
        }
      } catch (zApiError) {
        console.error('‚ùå Erro ao sincronizar com Z-API:', zApiError)
        // N√£o falhar a opera√ß√£o se a sincroniza√ß√£o falhar
      }
    } else {
      console.log('‚ö†Ô∏è AVISO: Grupo n√£o possui whatsapp_id, n√£o ser√° sincronizado com WhatsApp')
    }

    return NextResponse.json({
      message: 'Descri√ß√£o do grupo atualizada com sucesso',
      group: updatedGroup,
    })
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        {
          error: 'Dados inv√°lidos',
          details: error.issues.map(issue => ({
            field: issue.path.join('.'),
            message: issue.message,
          })),
        },
        { status: 400 }
      )
    }

    console.error('Erro na API de atualiza√ß√£o de descri√ß√£o do grupo:', error)
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}