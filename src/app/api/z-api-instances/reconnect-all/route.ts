import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import { ZApiClient } from '@/lib/z-api/client'

// POST /api/z-api-instances/reconnect-all - Reconectar todas as inst√¢ncias
export async function POST(request: NextRequest) {
  try {
    const supabase = await createClient()

    // Verificar autentica√ß√£o
    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser()
    if (authError || !user) {
      return NextResponse.json({ error: 'N√£o autorizado' }, { status: 401 })
    }

    console.log('üîÑ RECONECTANDO TODAS AS INST√ÇNCIAS Z-API ===')
    console.log('User ID:', user.id)

    // Buscar todas as inst√¢ncias do usu√°rio
    const { data: instances, error: instancesError } = await supabase
      .from('z_api_instances')
      .select('*')
      .eq('user_id', user.id)
      .eq('is_active', true)

    if (instancesError) {
      console.error('‚ùå Erro ao buscar inst√¢ncias:', instancesError)
      return NextResponse.json(
        { error: 'Erro ao buscar inst√¢ncias' },
        { status: 500 }
      )
    }

    if (!instances || instances.length === 0) {
      console.log('‚ÑπÔ∏è Nenhuma inst√¢ncia encontrada')
      return NextResponse.json({
        success: true,
        message: 'Nenhuma inst√¢ncia encontrada',
        data: { reconnected: 0, total: 0 }
      })
    }

    console.log(`üìã Encontradas ${instances.length} inst√¢ncias para reconectar`)

    const results = []
    let successCount = 0

    // Reconectar cada inst√¢ncia
    for (const instance of instances) {
      console.log(`üîÑ Reconectando inst√¢ncia: ${instance.name} (${instance.instance_id})`)
      
      try {
        const zApiClient = new ZApiClient(
          instance.instance_id,
          instance.instance_token,
          instance.client_token
        )

        // Tentar reconectar
        const reconnectResult = await zApiClient.connect()

        if (reconnectResult.success) {
          console.log(`‚úÖ Inst√¢ncia ${instance.name} reconectada com sucesso`)
          successCount++
          
          results.push({
            instanceId: instance.id,
            instanceName: instance.name,
            success: true,
            message: 'Reconectada com sucesso'
          })
        } else {
          console.error(`‚ùå Falha ao reconectar ${instance.name}:`, reconnectResult.error)
          
          results.push({
            instanceId: instance.id,
            instanceName: instance.name,
            success: false,
            error: reconnectResult.error
          })
        }
      } catch (error: any) {
        console.error(`‚ùå Erro ao reconectar ${instance.name}:`, error)
        
        results.push({
          instanceId: instance.id,
          instanceName: instance.name,
          success: false,
          error: error.message
        })
      }
    }

    console.log(`‚úÖ Reconex√£o conclu√≠da: ${successCount}/${instances.length} inst√¢ncias reconectadas`)

    return NextResponse.json({
      success: true,
      message: `Reconex√£o conclu√≠da: ${successCount}/${instances.length} inst√¢ncias reconectadas`,
      data: {
        total: instances.length,
        reconnected: successCount,
        results
      }
    })

  } catch (error) {
    console.error('‚ùå Erro na reconex√£o de inst√¢ncias:', error)
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}
