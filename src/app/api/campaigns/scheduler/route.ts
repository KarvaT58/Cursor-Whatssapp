import { NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { CampaignSender } from '@/lib/campaign-sender';
import { getCurrentBrazilTimeString, getCurrentBrazilDateString, isTimeToExecute, logBrazilTime } from '@/lib/timezone';

export async function POST() {
  try {
    console.log('üïê Verificando campanhas agendadas...');
    
    // Usar service role key para ter acesso completo aos dados
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!
    );
    console.log('üîß Supabase client criado:', !!supabase);
    
    // Buscar agendamentos ativos primeiro
    console.log('üîç Buscando agendamentos ativos...');
    const { data: schedules, error: schedulesError } = await supabase
      .from('campaign_schedules')
      .select('*')
      .eq('is_active', true)
      .eq('is_recurring', true);

    console.log('üìä Agendamentos encontrados:', schedules);

    if (schedulesError) {
      console.error('Erro ao buscar agendamentos:', schedulesError);
      return NextResponse.json({ error: 'Erro ao buscar agendamentos' }, { status: 500 });
    }

    if (!schedules || schedules.length === 0) {
      console.log('üì≠ Nenhum agendamento ativo encontrado');
      return NextResponse.json({ message: 'Nenhuma campanha agendada' });
    }

    // Buscar campanhas ativas para os agendamentos encontrados
    const campaignIds = schedules.map(s => s.campaign_id);
    const { data: campaigns, error: campaignsError } = await supabase
      .from('campaigns')
      .select('id, name, status, global_interval')
      .in('id', campaignIds)
      .eq('status', 'active');

    console.log('üìä Campanhas ativas encontradas:', campaigns);

    if (campaignsError) {
      console.error('Erro ao buscar campanhas:', campaignsError);
      return NextResponse.json({ error: 'Erro ao buscar campanhas' }, { status: 500 });
    }

    // Filtrar agendamentos que t√™m campanhas ativas
    const activeSchedules = schedules.filter(schedule => 
      campaigns.some(campaign => campaign.id === schedule.campaign_id)
    );

    console.log('üìä Agendamentos com campanhas ativas:', activeSchedules);

    if (!activeSchedules || activeSchedules.length === 0) {
      console.log('üì≠ Nenhuma campanha agendada encontrada');
      return NextResponse.json({ message: 'Nenhuma campanha agendada' });
    }

    console.log(`üìã Encontradas ${activeSchedules.length} campanhas agendadas`);

    // Usar hor√°rio do Brasil
    const currentTime = getCurrentBrazilTimeString(); // HH:MM no timezone do Brasil
    const currentDate = getCurrentBrazilDateString(); // YYYY-MM-DD no timezone do Brasil
    const now = new Date();
    const currentDay = now.getDay(); // 0 = Domingo, 1 = Segunda, etc.
    
    logBrazilTime('‚è∞ Hor√°rio atual do Brasil:', currentTime);
    logBrazilTime('üìÖ Data atual do Brasil:', currentDate);
    logBrazilTime('üìÖ Dia da semana:', currentDay);
    
    const executionsToRun: Array<{ schedule: Record<string, unknown>; campaign: Record<string, unknown> }> = [];

    for (const schedule of activeSchedules) {
      const campaign = campaigns.find(c => c.id === schedule.campaign_id);
      
      if (!campaign) {
        logBrazilTime(`‚ö†Ô∏è Campanha n√£o encontrada para agendamento: ${schedule.schedule_name || 'Sem nome'}`);
        continue;
      }
      
      logBrazilTime(`üîç Verificando agendamento: ${schedule.schedule_name || 'Sem nome'}`);
      logBrazilTime(`‚è∞ Hor√°rio agendado: ${schedule.start_time}`);
      logBrazilTime(`‚è∞ Hor√°rio atual do Brasil: ${currentTime}`);
      logBrazilTime(`üìÖ Dias v√°lidos: ${schedule.days_of_week}`);
      
      // Verificar se √© o hor√°rio correto usando timezone do Brasil
      const scheduleTime = schedule.start_time.slice(0, 5); // Remove segundos se existirem
      if (!isTimeToExecute(scheduleTime, 1)) { // Toler√¢ncia de 1 minuto
        logBrazilTime(`‚è≠Ô∏è Hor√°rio n√£o confere (${scheduleTime} vs ${currentTime}), pulando...`);
        continue;
      }

      // Verificar se √© um dia v√°lido
      const validDays = schedule.days_of_week.split(',').map(Number);
      if (!validDays.includes(currentDay)) {
        continue;
      }

      // Verificar se hoje est√° bloqueado (data espec√≠fica ou dia da semana)
      const today = currentDate; // Usar data do Brasil
      const dayOfWeek = now.getDay();
      
      const { data: blockedToday } = await supabase
        .from('campaign_blocked_dates')
        .select('id, blocking_type, blocking_value')
        .eq('campaign_id', campaign.id)
        .or(`and(blocking_type.eq.specific,blocked_date.eq.${today}),and(blocking_type.eq.day_of_week,blocking_value.eq.${dayOfWeek})`)
        .limit(1);

      if (blockedToday && blockedToday.length > 0) {
        const blockType = blockedToday[0].blocking_type;
        const blockValue = blockedToday[0].blocking_value;
        
        let blockReason = '';
        if (blockType === 'specific') {
          blockReason = `data espec√≠fica (${today})`;
        } else if (blockType === 'day_of_week') {
          const dayNames = ['domingo', 'segunda', 'ter√ßa', 'quarta', 'quinta', 'sexta', 's√°bado'];
          blockReason = `todas as ${dayNames[blockValue]}s`;
        }
        
        logBrazilTime(`üö´ Campanha ${campaign.name} est√° bloqueada para hoje (${today}) - ${blockReason}`);
        continue;
      }

      // Verificar se j√° foi executada hoje
      const { data: todayExecution } = await supabase
        .from('campaign_executions')
        .select('id')
        .eq('campaign_id', campaign.id)
        .gte('executed_at', `${today}T00:00:00`)
        .lte('executed_at', `${today}T23:59:59`)
        .eq('status', 'completed')
        .limit(1);

      if (todayExecution && todayExecution.length > 0) {
        logBrazilTime(`‚è≠Ô∏è Campanha ${campaign.name} j√° foi executada hoje`);
        continue;
      }

      executionsToRun.push({ schedule, campaign });
    }

    if (executionsToRun.length === 0) {
      logBrazilTime('üì≠ Nenhuma campanha para executar agora');
      return NextResponse.json({ message: 'Nenhuma campanha para executar' });
    }

    logBrazilTime(`üöÄ Executando ${executionsToRun.length} campanhas...`);

    const results = [];

    for (const { schedule, campaign } of executionsToRun) {
      try {
        // Criar registro de execu√ß√£o
        const { data: execution, error: executionError } = await supabase
          .from('campaign_executions')
          .insert({
            campaign_id: campaign.id,
            schedule_id: schedule.id,
            status: 'running'
          })
          .select()
          .single();

        if (executionError) {
          logBrazilTime(`‚ùå Erro ao criar execu√ß√£o para ${campaign.name}:`, executionError);
          continue;
        }

        logBrazilTime(`üéØ Executando campanha: ${campaign.name}`);

        // Executar campanha
        const campaignSender = new CampaignSender();
        const result = await campaignSender.sendCampaign(campaign.id as string);

        // Atualizar status da execu√ß√£o
        await supabase
          .from('campaign_executions')
          .update({
            status: result.success ? 'completed' : 'failed',
            result: result,
            error_message: result.success ? null : result.message
          })
          .eq('id', execution.id);

        // Atualizar √∫ltimo hor√°rio de execu√ß√£o
        await supabase
          .from('campaign_schedules')
          .update({
            last_executed_at: now.toISOString()
          })
          .eq('id', schedule.id);

        results.push({
          campaign: campaign.name,
          success: result.success,
          message: result.message
        });

        logBrazilTime(`‚úÖ Campanha ${campaign.name} executada: ${result.success ? 'Sucesso' : 'Falha'}`);

      } catch (error) {
        logBrazilTime(`‚ùå Erro ao executar campanha ${campaign.name}:`, error);
        
        // Atualizar execu√ß√£o como falha
        await supabase
          .from('campaign_executions')
          .update({
            status: 'failed',
            error_message: error instanceof Error ? error.message : 'Erro desconhecido'
          })
          .eq('campaign_id', campaign.id)
          .eq('status', 'running');

        results.push({
          campaign: campaign.name,
          success: false,
          message: error instanceof Error ? error.message : 'Erro desconhecido'
        });
      }
    }

    return NextResponse.json({
      message: `Executadas ${results.length} campanhas`,
      results
    });

  } catch (error) {
    logBrazilTime('‚ùå Erro no scheduler:', error);
    return NextResponse.json({ error: 'Erro interno do servidor' }, { status: 500 });
  }
}
